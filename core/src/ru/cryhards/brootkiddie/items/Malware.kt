package ru.cryhards.brootkiddie.items

import com.badlogic.gdx.graphics.Texture

/**
 * Represents a malware used for attacks
 */
class Malware(title: String, info: String, iconTexture: Texture) : Item(title, info, iconTexture, Item.Type.MALWARE) {
    /**
     * Pieces of code that is is combined of
     */
    var scripts = ArrayList<Script>()

    constructor(title: String, info: String, iconTexture: Texture, vararg scripts: Script) : this(title, info, iconTexture) {
        for (s in scripts)
            this.scripts.add(s)
    }


    /**
     * Represents malware parameters
     */
    val stats = Stats()

    /**
     * Represents malware parameters
     */
    class Stats {
        var suspiciousness = 0f
        var spreadingSpeed = 0f
        var infectiousness = 0f
        var miningSpeed = 0f

        /**
         * Adds extra value to the stats
         */
        fun modulateBy(stats: Stats) {
            suspiciousness += stats.suspiciousness
            spreadingSpeed += stats.spreadingSpeed
            infectiousness += stats.infectiousness
            miningSpeed += stats.miningSpeed
        }
    }

    /**
     * Adds new script to this and returns this
     */
    fun combine(script: Script): Malware {
        title += script.title.subSequence(0, 3)
        info += " and " + script.title
        scripts.add(script)
        return this
    }

    operator fun plus(script: Script) = combine(script)


    /**
     * Recalculates malware stats
     */
    fun update() {
        stats.suspiciousness = 0f
        stats.spreadingSpeed = 0f
        stats.infectiousness = 0f
        stats.miningSpeed = 0f

        scripts.forEach { stats.modulateBy(it.affection()) }
    }


    override fun toString(): String {
        return "Infectiousness: ${stats.infectiousness}" +
                "Spreading Speed: ${stats.spreadingSpeed}" +
                "Suspiciousness: ${stats.suspiciousness}" +
                "Mining Speed: ${stats.miningSpeed}"
    }

}