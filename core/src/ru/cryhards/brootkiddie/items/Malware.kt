package ru.cryhards.brootkiddie.items

import com.badlogic.gdx.Gdx
import com.badlogic.gdx.graphics.Texture
import com.badlogic.gdx.scenes.scene2d.InputEvent
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener
import ru.cryhards.brootkiddie.Environment
import ru.cryhards.brootkiddie.items.effects.Converter
import ru.cryhards.brootkiddie.ui.UI
import java.lang.Math.pow

/**
 * Represents a malware used for attacks
 */
class Malware(title: String, info: String, iconTexture: Texture) : Item(title, info, iconTexture, Item.Type.MALWARE) {
    /**
     * Pieces of code that is is combined of
     */
    var scripts = ArrayList<Script>()

    constructor(title: String, info: String, iconTexture: Texture, vararg scripts: Script) : this(title, info, iconTexture) {
        for (s in scripts)
            this.scripts.add(s)
        update()
    }

    init {
        val setGlobalMapMalware = if (Environment.activeMalware == this) UI.GlitchTextButton("DEACTIVATE") else UI.GlitchTextButton("ACTIVATE")
        setGlobalMapMalware.addListener(object : ClickListener() {
            override fun clicked(event: InputEvent?, x: Float, y: Float) {
                if (Environment.activeMalware == this@Malware) {
                    Gdx.app.log("activeMalware", "deactivated")
                    Environment.UI.console?.log("${this@Malware.title} deactivated")
                    Environment.activeMalware = null
                    setGlobalMapMalware.setText("ACTIVATE")
                } else {
                    Gdx.app.log("activeMalware", "activated")
                    Environment.activeMalware = this@Malware
                    Environment.UI.console?.log("${this@Malware.title} activated")
                    setGlobalMapMalware.setText("DEACTIVATE")
                }
            }
        })

        this.actions.add(setGlobalMapMalware)
    }

    /**
     * Represents malware parameters
     */
    val stats = Stats()

    /**
     * Represents malware parameters
     */
    class Stats {
        var suspiciousness = 0f
        var spreadingSpeed = 0f
        var infectiousness = 0f
        var miningSpeed = 0f

        /**
         * Adds extra value to the stats
         */
        fun modulateBy(stats: Stats) {
            suspiciousness += stats.suspiciousness
            spreadingSpeed += stats.spreadingSpeed
            infectiousness += stats.infectiousness
            miningSpeed += stats.miningSpeed
        }
    }


    /**
     * Adds new effect to this and returns this
     */
    override fun combine(effect: Effect): Malware {
        effects.add(effect)
        update()  // TODO: performance ?
        return this
    }


    /**
     * Adds new script to this and returns this
     */
    fun combine(script: Script): Malware {
        scripts.add(script)
        update()  // TODO: performance ?
        return this
    }

    /**
     * Recalculates malware stats
     */
    fun update() {
        stats.suspiciousness = 0f
        stats.spreadingSpeed = 0f
        stats.infectiousness = 0f
        stats.miningSpeed = 0f

        scripts.forEach { stats.modulateBy(it.affection()) }
        effects.forEach { it.affect(this.stats) }

        stats.suspiciousness += pow(scripts.map { it.size }.sum().toDouble() / 100.0, 2.0).toFloat()
    }


    override fun toString(): String {
        return "Infectiousness: ${Converter.humanReadable(stats.infectiousness)}\n" +
                "Spreading Speed: ${Converter.humanReadable(stats.spreadingSpeed)}\n" +
                "Suspiciousness: ${Converter.humanReadable(stats.suspiciousness)}\n" +
                "Mining Speed: ${Converter.humanReadable(stats.miningSpeed)}"
    }

}