package ru.cryhards.brootkiddie

import com.badlogic.gdx.Gdx
import com.badlogic.gdx.Input
import com.badlogic.gdx.Screen
import com.badlogic.gdx.graphics.Color
import com.badlogic.gdx.graphics.GL20
import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator
import com.badlogic.gdx.scenes.scene2d.InputEvent
import com.badlogic.gdx.scenes.scene2d.InputListener
import com.badlogic.gdx.scenes.scene2d.Stage
import com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup
import com.badlogic.gdx.scenes.scene2d.ui.Label
import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane
import com.badlogic.gdx.scenes.scene2d.ui.VerticalGroup
import ru.cryhards.brootkiddie.malware.Malware
import ru.cryhards.brootkiddie.malware.scripts.BaseScript
import ru.cryhards.brootkiddie.malware.scripts.Script
import ru.cryhards.brootkiddie.ui.MalwareBaseWidget
import ru.cryhards.brootkiddie.ui.ScriptWidget
import ru.cryhards.brootkiddie.utils.AssetManager

/**
 * Created by Dima on 26.01.2018.
 */
class MalwareEditorScreen(val player: Player, val game : ReallyGame)  : Screen{



    val stage = Stage()
    lateinit var malware : Malware
    val basePane : ScrollPane
    val scriptPane : ScrollPane
    val pickedScripts = mutableListOf<Script>()
    val pickedSctiptWidgetGroup = VerticalGroup()
    val pickedScriptPane = ScrollPane(pickedSctiptWidgetGroup)
    val sizeLabel : Label
    val finishButton : Label
    var currentSzie = 0

    init {
        val baseList = HorizontalGroup()
        for (base in player.baseList)
        {
            val malwareBaseWidget = MalwareBaseWidget.createWidget(base)
            malwareBaseWidget.addListener(object : InputListener() {
                override fun touchDown(event: InputEvent?, x: Float, y: Float, pointer: Int, button: Int): Boolean {
                    pickBase(malwareBaseWidget.base)
                    return super.touchDown(event, x, y, pointer, button)
                }
            })
            baseList.addActor(malwareBaseWidget)
        }

        baseList.pack()

        basePane = ScrollPane(baseList)
        basePane.pack()
        basePane.width = Gdx.graphics.width.toFloat()
        basePane.y = 200f

        val scriptList = VerticalGroup()
        for (script in player.scriptList)
        {
            val scriptWidget = ScriptWidget.createWidget(script)
            scriptWidget.addListener(object : InputListener() {
                override fun touchDown(event: InputEvent?, x: Float, y: Float, pointer: Int, button: Int): Boolean {
                    pickScript(scriptWidget.script)
                    return super.touchDown(event, x, y, pointer, button)
                }
            })
            scriptList.addActor(scriptWidget)
        }

        scriptList.pack()

        scriptPane = ScrollPane(scriptList)
        scriptPane.pack()
        scriptPane.height = Gdx.graphics.height.toFloat()
        scriptPane.isVisible = false

        pickedScriptPane.x = Gdx.graphics.width.toFloat() - scriptPane.width
        pickedScriptPane.height = Gdx.graphics.height.toFloat()
        pickedScriptPane.width = scriptPane.width

        AssetManager.loadFont("fonts/roboto.ttf", "roboto")
        val fontParameter = FreeTypeFontGenerator.FreeTypeFontParameter()

        fontParameter.size = 40
        var font = AssetManager.makeFont("roboto", fontParameter)
        var style = Label.LabelStyle(font, Color(224 / 255f, 35f / 255f, 45f / 255f, 1f))

        sizeLabel = Label("0/0", style)
        sizeLabel.x = scriptPane.width
        sizeLabel.isVisible = false

        font = AssetManager.makeFont("roboto", fontParameter)
        style = Label.LabelStyle(font, Color(224 / 255f, 35f / 255f, 45f / 255f, 1f))

        finishButton = Label("FINISH", style)
        finishButton.x = scriptPane.width
        finishButton.y = sizeLabel.height
        finishButton.isVisible = false
        finishButton.addListener(object : InputListener(){
            override fun touchDown(event: InputEvent?, x: Float, y: Float, pointer: Int, button: Int): Boolean {
                finishCreation()
                return super.touchDown(event, x, y, pointer, button)
            }
        })

        font = AssetManager.makeFont("roboto", fontParameter)
        style = Label.LabelStyle(font, Color(224 / 255f, 35f / 255f, 45f / 255f, 1f))

        stage.addActor(finishButton)
        stage.addActor(basePane)
        stage.addActor(scriptPane)
        stage.addActor(pickedScriptPane)
        stage.addActor(sizeLabel)

        stage.addListener(object : InputListener(){
            override fun keyDown(event: InputEvent?, keycode: Int): Boolean {
                if (keycode == Input.Keys.BACK)
                {
                    backToGlobalMap()
                }
                return super.keyDown(event, keycode)
            }
        })

        Gdx.input.inputProcessor = stage
        Gdx.input.isCatchBackKey = true
    }

    override fun hide() {

    }

    override fun show() {

    }

    override fun render(delta: Float) {
        Gdx.gl.glClearColor(0f, 0f, 0f, 1f)
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT)
        stage.act()
        stage.draw()
    }

    override fun pause() {

    }

    override fun resume() {

    }

    override fun resize(width: Int, height: Int) {

    }

    override fun dispose() {

    }

    fun pickBase(base : BaseScript) {
        malware = object : Malware("Petya", player) {
            init {
                addScript(base)
                capacity = base.capacity
            }
        }

        sizeLabel.setText("0/${malware.capacity}")

        sizeLabel.isVisible = true
        scriptPane.isVisible = true
        finishButton.isVisible = true
        basePane.isVisible = false
    }


    fun pickScript(script : Script){

        if (currentSzie + script.getSize() <= malware.capacity) {

            pickedScripts += script
            val widget = ScriptWidget.createWidget(script)
            pickedSctiptWidgetGroup.addActor(widget)
            pickedSctiptWidgetGroup.pack()

            currentSzie+=script.getSize()

            sizeLabel.setText("${currentSzie}/${malware.capacity}")
        }
    }

    fun finishCreation() {
        for (s in pickedScripts)
            malware.addScript(s)

        player.malwareList += malware
        game.globalMapScreen.level.addMalware(malware)
        game.closeEditor()
    }

    fun backToGlobalMap(){
        game.closeEditor()
    }
}